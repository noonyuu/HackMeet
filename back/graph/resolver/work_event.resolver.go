package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"

	"github.com/noonyuu/nfc/back/graph"
	"github.com/noonyuu/nfc/back/graph/model"
)

// CreateWorkEvent is the resolver for the createWorkEvent field.
func (r *mutationResolver) CreateWorkEvent(ctx context.Context, input model.NewWorkEvent) (*model.WorkEvent, error) {
	panic(fmt.Errorf("not implemented: CreateWorkEvent - createWorkEvent"))
}

// WorkEventsByWorkID is the resolver for the workEventsByWorkId field.
func (r *queryResolver) WorkEventsByWorkID(ctx context.Context, workID string) ([]*model.WorkEvent, error) {
	panic(fmt.Errorf("not implemented: WorkEventsByWorkID - workEventsByWorkId"))
}

// WorkEventsByEventID is the resolver for the workEventsByEventId field.
func (r *queryResolver) WorkEventsByEventID(ctx context.Context, eventID string) ([]*model.WorkEvent, error) {
	panic(fmt.Errorf("not implemented: WorkEventsByEventID - workEventsByEventId"))
}

// ID is the resolver for the id field.
func (r *workEventResolver) ID(ctx context.Context, obj *model.WorkEvent) (int32, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *workEventResolver) CreatedAt(ctx context.Context, obj *model.WorkEvent) (string, error) {
	return obj.CreatedAt.Format("2006-01-02 15:04:05"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *workEventResolver) UpdatedAt(ctx context.Context, obj *model.WorkEvent) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02 15:04:05"), nil
}

// Works is the resolver for the works field.
func (r *workEventResolver) Works(ctx context.Context, obj *model.WorkEvent) ([]*model.Work, error) {
	return []*model.Work{}, nil
}

// WorkEvent returns graph.WorkEventResolver implementation.
func (r *Resolver) WorkEvent() graph.WorkEventResolver { return &workEventResolver{r} }

type workEventResolver struct{ *Resolver }
