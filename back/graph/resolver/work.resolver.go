package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/noonyuu/nfc/back/graph"
	"github.com/noonyuu/nfc/back/graph/model"
)

// CreateWork is the resolver for the createWork field.
func (r *mutationResolver) CreateWork(ctx context.Context, input model.NewWork) (*model.Work, error) {
	// uuidを生成
	uid, _ := uuid.NewRandom()
	// 生成したUUIDを文字列に変換
	uidString := uid.String()
	// 現在時刻を取得
	now := time.Now()
	// Work構造体にUUIDと現在時刻をセット
	work := &model.Work{
		ID:          uidString,
		Title:       input.Title,
		Description: *input.Description,
		ImageURL:    input.ImageURL,
		CreatedAt:   now,
		UpdatedAt:   now,
	}
	query := `
	INSERT INTO works (id, title, description, image_url created_at, updated_at)
	VALUES (?, ?, ?, ?, ?, ?)
`
	if _, err := r.DB.Exec(query, work.ID, work.Title, work.ImageURL, work.Description, now, now); err != nil {
		return nil, err
	}

	return work, nil
}

// Work is the resolver for the work field.
func (r *queryResolver) Work(ctx context.Context, id string) (*model.Work, error) {
	query := `
	SELECT id, event_id, title, description, image_url, created_at, updated_at
	FROM works
	WHERE id = ?
`
	work := &model.Work{}
	if err := r.DB.QueryRow(query, id).Scan(&work.ID, &work.Title, work.ImageURL, &work.Description, &work.CreatedAt, &work.UpdatedAt); err != nil {
		return nil, err
	}

	return work, nil
}

// WorksByTitle is the resolver for the worksByTitle field.
func (r *queryResolver) WorksByTitle(ctx context.Context, title string) ([]*model.Work, error) {
	query := `
	SELECT id, event_id, title, description, image_url, created_at, updated_at
	FROM works
	WHERE title = ?
`
	rows, err := r.DB.Query(query, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var works []*model.Work
	for rows.Next() {
		work := &model.Work{}
		if err := rows.Scan(&work.ID, &work.Title, &work.Description, &work.CreatedAt, &work.UpdatedAt); err != nil {
			return nil, err
		}
		works = append(works, work)
	}

	return works, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *workResolver) CreatedAt(ctx context.Context, obj *model.Work) (string, error) {
	return obj.CreatedAt.Format("2006-01-02 15:04:05"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *workResolver) UpdatedAt(ctx context.Context, obj *model.Work) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02 15:04:05"), nil
}

// Work returns graph.WorkResolver implementation.
func (r *Resolver) Work() graph.WorkResolver { return &workResolver{r} }

type workResolver struct{ *Resolver }
