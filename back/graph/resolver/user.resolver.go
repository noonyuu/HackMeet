package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"log"
	"time"

	"github.com/google/uuid"
	"github.com/noonyuu/nfc/back/graph"
	"github.com/noonyuu/nfc/back/graph/model"
	"github.com/vektah/gqlparser/gqlerror"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	// uuidを生成
	uid, _ := uuid.NewRandom()
	// 生成したUUIDを文字列に変換
	uidString := uid.String()
	// 現在時刻を取得
	now := time.Now()
	// User構造体にUUIDと現在時刻をセット
	user := &model.User{
		ID:        uidString,
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Email:     input.Email,
		CreatedAt: now,
		UpdatedAt: now,
	}

	query := `
		INSERT INTO users (id, first_name, last_name, email, created_at, updated_at)
		VALUES (?, ?, ?, ?, ?, ?)
	`

	_, err := r.DB.Exec(query, user.ID, input.FirstName, input.LastName, input.Email, user.CreatedAt, user.UpdatedAt)
	if err != nil {
		log.Printf("failed to insert user: %v", err)

		return nil, &gqlerror.Error{
			Message: "ユーザーの登録に失敗しました。",
			Extensions: map[string]interface{}{
				"code": "INTERNAL_SERVER_ERROR",
			},
		}
	}

	return user, nil
}

// UserByID is the resolver for the userById field.
func (r *queryResolver) UserByID(ctx context.Context, id string) (*model.User, error) {
	query := `
		SELECT id, first_name, last_name, email, created_at, updated_at
		FROM users
		WHERE id = ?
	`
	row := r.DB.QueryRow(query, id)
	var user model.User
	if err := row.Scan(&user.ID, &user.FirstName, &user.LastName, &user.Email, &user.CreatedAt, &user.UpdatedAt); err != nil {
		log.Printf("failed to query user by ID: %v", err)

		return nil, &gqlerror.Error{
			Message: "ユーザーの取得に失敗しました。",
			Extensions: map[string]interface{}{
				"code": "INTERNAL_SERVER_ERROR",
			},
		}
	}

	return &user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	query := `
		SELECT id, first_name, last_name, email, created_at, updated_at
		FROM users
	`
	rows, err := r.DB.Query(query)
	if err != nil {
		log.Printf("failed to query users: %v", err)

		return nil, &gqlerror.Error{
			Message: "ユーザーの取得中にサーバーエラーが発生しました。",
			Extensions: map[string]interface{}{
				"code": "INTERNAL_SERVER_ERROR",
			},
		}
	}
	defer rows.Close()

	var users []*model.User

	for rows.Next() {
		var user model.User
		if err = rows.Scan(&user.ID, &user.FirstName, &user.LastName, &user.Email, &user.CreatedAt, &user.UpdatedAt); err != nil {
			log.Printf("failed to scan user: %v", err)

			return nil, &gqlerror.Error{
				Message: "ユーザーの取得中にサーバーエラーが発生しました。",
				Extensions: map[string]interface{}{
					"code": "INTERNAL_SERVER_ERROR",
				},
			}
		}

		users = append(users, &user)
	}

	if er := rows.Err(); er != nil {
		return nil, &gqlerror.Error{
			Message: "ユーザーの取得中にサーバーエラーが発生しました。",
			Extensions: map[string]interface{}{
				"code": "INTERNAL_SERVER_ERROR",
			},
		}
	}

	return users, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *model.User) (string, error) {
	return obj.CreatedAt.Format("2006-01-02 15:04:05"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *userResolver) UpdatedAt(ctx context.Context, obj *model.User) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02 15:04:05"), nil
}

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
