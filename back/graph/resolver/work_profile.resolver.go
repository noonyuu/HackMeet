package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"database/sql"
	"time"

	"github.com/noonyuu/nfc/back/graph"
	"github.com/noonyuu/nfc/back/graph/model"
)

// CreateWorkProfile is the resolver for the createWorkProfile field.
func (r *mutationResolver) CreateWorkProfile(ctx context.Context, input model.NewWorkProfile) (*model.WorkProfile, error) {
	// 現在時刻を取得
	now := time.Now()
	// WorkProfile構造体にUUIDと現在時刻をセット
	workProfile := &model.WorkProfile{
		WorkID:    input.WorkID,
		ProfileID: input.ProfileID,
		CreatedAt: now,
		UpdatedAt: now,
	}

	query := `
	INSERT INTO work_profiles (work_id, profile_id, created_at, updated_at)
	VALUES (?, ?, ?, ?)
`
	if _, err := r.DB.Exec(query, workProfile.WorkID, workProfile.ProfileID, now, now); err != nil {
		return nil, err
	}

	return workProfile, nil
}

// DeleteWorkProfile is the resolver for the deleteWorkProfile field.
func (r *mutationResolver) DeleteWorkProfile(ctx context.Context, id int32) (*model.WorkProfile, error) {
	query := `
	DELETE FROM work_profiles WHERE id = ?
`
	if _, err := r.DB.Exec(query, id); err != nil {
		return nil, err
	}

	return &model.WorkProfile{ID: id}, nil
}

// WorkProfile is the resolver for the workProfile field.
func (r *queryResolver) WorkProfile(ctx context.Context, id int32) (*model.WorkProfile, error) {
	query := `
	SELECT wp.id, wp.work_id, wp.profile_id,
		w.id, w.title, w.description, w.image_url,
		p.id, p.avatar_url, p.nick_name, p.graduation_year, p.affiliation, p.bio
		FROM work_profiles wp
		JOIN works w ON wp.work_id = w.id
		JOIN profiles p ON wp.profile_id = p.id
		WHERE wp.id = ?
	`

	row := r.DB.QueryRow(query, id)

	wp := &model.WorkProfile{}
	work := &model.Work{}
	profile := &model.Profile{}

	var graduationYear sql.NullInt32

	err := row.Scan(
		&wp.ID, &wp.WorkID, &wp.ProfileID,
		&work.ID, &work.Title, &work.Description, &work.ImageURL,
		&profile.ID, &profile.AvatarURL, &profile.NickName, &graduationYear,
		&profile.Affiliation, &profile.Bio,
	)
	if err != nil {
		return nil, err
	}

	if graduationYear.Valid {
		profile.GraduationYear = &graduationYear.Int32
	} else {
		profile.GraduationYear = nil
	}

	wp.Work = work
	wp.Profile = profile

	return wp, nil
}

// WorkProfilesByWorkID is the resolver for the workProfilesByWorkId field.
func (r *queryResolver) WorkProfilesByWorkID(ctx context.Context, workID string) ([]*model.WorkProfile, error) {
	query := `
	SELECT id, work_id, profile_id, created_at, updated_at
	FROM work_profiles
	WHERE work_id = ?
`
	workProfiles := []*model.WorkProfile{}
	rows, err := r.DB.Query(query, workID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		workProfile := &model.WorkProfile{}
		if err := rows.Scan(&workProfile.ID, &workProfile.WorkID, &workProfile.ProfileID, &workProfile.CreatedAt, &workProfile.UpdatedAt); err != nil {
			return nil, err
		}
		workProfiles = append(workProfiles, workProfile)
	}

	return workProfiles, nil
}

// WorkProfilesByProfileID is the resolver for the workProfilesByProfileId field.
func (r *queryResolver) WorkProfilesByProfileID(ctx context.Context, profileID string) ([]*model.WorkProfile, error) {
	query := `
	SELECT id, work_id, profile_id, created_at, updated_at
	FROM work_profiles
	WHERE profile_id = ?
`
	workProfiles := []*model.WorkProfile{}
	rows, err := r.DB.Query(query, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		workProfile := &model.WorkProfile{}
		if err := rows.Scan(&workProfile.ID, &workProfile.WorkID, &workProfile.ProfileID, &workProfile.CreatedAt, &workProfile.UpdatedAt); err != nil {
			return nil, err
		}
		workProfiles = append(workProfiles, workProfile)
	}

	return workProfiles, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *workProfileResolver) CreatedAt(ctx context.Context, obj *model.WorkProfile) (string, error) {
	return obj.CreatedAt.Format("2006-01-02 15:04:05"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *workProfileResolver) UpdatedAt(ctx context.Context, obj *model.WorkProfile) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02 15:04:05"), nil
}

// WorkProfile returns graph.WorkProfileResolver implementation.
func (r *Resolver) WorkProfile() graph.WorkProfileResolver { return &workProfileResolver{r} }

type workProfileResolver struct{ *Resolver }
