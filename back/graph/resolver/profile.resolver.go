package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"database/sql"
	"time"

	"github.com/noonyuu/nfc/back/graph"
	"github.com/noonyuu/nfc/back/graph/model"
)

// CreateProfile is the resolver for the createProfile field.
func (r *mutationResolver) CreateProfile(ctx context.Context, input model.NewProfile) (*model.Profile, error) {
	// 現在時刻を取得
	now := time.Now()
	// GraduationYearがnilでない場合はsql.NullInt32を使って値を設定
	var graduationYear sql.NullInt32
	if input.GraduationYear != nil {
		graduationYear = sql.NullInt32{
			Int32: *input.GraduationYear,
			Valid: true,
		}
	} else {
		graduationYear = sql.NullInt32{Valid: false} // nilの場合は無効とする
	}
	profile := &model.Profile{
		ID:             input.UserID,
		AvatarURL:      *input.AvatarURL,
		NickName:       input.NickName,
		GraduationYear: &graduationYear.Int32,
		Affiliation:    *input.Affiliation,
		Bio:            *input.Bio,
		CreatedAt:      now,
		UpdatedAt:      now,
	}

	query := `
	INSERT INTO profiles (id, avatar_url, nick_name, graduation_year, affiliation, bio, created_at, updated_at)
	VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`
	if _, err := r.DB.Exec(query, profile.ID, profile.AvatarURL, profile.NickName, profile.GraduationYear, profile.Affiliation, profile.Bio, now, now); err != nil {
		return nil, err
	}
	return profile, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *profileResolver) CreatedAt(ctx context.Context, obj *model.Profile) (string, error) {
	return obj.CreatedAt.Format("2006-01-02 15:04:05"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *profileResolver) UpdatedAt(ctx context.Context, obj *model.Profile) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02 15:04:05"), nil
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context, id string) (*model.Profile, error) {
	query := `
	SELECT id, avatar_url, nick_name, graduation_year, affiliation, bio, created_at, updated_at
	FROM profiles
	WHERE id = ?
`
	row := r.DB.QueryRow(query, id)
	var profile model.Profile

	if err := row.Scan(&profile.ID, &profile.AvatarURL, &profile.NickName, &profile.GraduationYear, &profile.Affiliation, &profile.Bio, &profile.CreatedAt, &profile.UpdatedAt); err != nil {
		return nil, err
	}
	return &profile, nil
}

// ProfileByNickName is the resolver for the profileByNickName field.
func (r *queryResolver) ProfileByNickName(ctx context.Context, nickName string) (*model.Profile, error) {
	query := `
	SELECT id, avatar_url, nick_name, graduation_year, affiliation, bio, created_at, updated_at
	FROM profiles
	WHERE nick_name = ?
`
	row := r.DB.QueryRow(query, nickName)
	var profile model.Profile

	if err := row.Scan(&profile.ID, &profile.AvatarURL, &profile.NickName, &profile.GraduationYear, &profile.Affiliation, &profile.Bio, &profile.CreatedAt, &profile.UpdatedAt); err != nil {
		return nil, err
	}
	return &profile, nil
}

// ProfileByUserID is the resolver for the profileByUserId field.
func (r *queryResolver) ProfileByUserID(ctx context.Context, id string) (*model.Profile, error) {
	query := `
	SELECT id, avatar_url, nick_name, graduation_year, affiliation, bio, created_at, updated_at
	FROM profiles
	WHERE id = ?
	`

	row := r.DB.QueryRow(query, id)

	var profile model.Profile
	var graduationYear sql.NullInt32

	if err := row.Scan(
		&profile.ID,
		&profile.AvatarURL,
		&profile.NickName,
		&graduationYear,
		&profile.Affiliation,
		&profile.Bio,
		&profile.CreatedAt,
		&profile.UpdatedAt,
	); err != nil {
		return nil, err
	}

	// sql.NullInt32 → *int32 変換
	if graduationYear.Valid {
		// graduationYear.Int32 は int32 型なので、それを *int32 にする
		profile.GraduationYear = &graduationYear.Int32
	} else {
		profile.GraduationYear = nil // NULLの場合は nil をセット
	}

	return &profile, nil
}

// Profile returns graph.ProfileResolver implementation.
func (r *Resolver) Profile() graph.ProfileResolver { return &profileResolver{r} }

type profileResolver struct{ *Resolver }
