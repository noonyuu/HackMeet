package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/noonyuu/nfc/back/graph"
	"github.com/noonyuu/nfc/back/graph/model"
)

// CreateProfile is the resolver for the createProfile field.
func (r *mutationResolver) CreateProfile(ctx context.Context, input model.NewProfile) (*model.Profile, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(100))
	profile := &model.Profile{
		ID:        fmt.Sprintf("%d", randNumber),
		UserID:    input.UserID,
		AvatarURL: *input.AvatarURL,
		Nickname:  *input.NickName,
		Bio:       *input.Bio,
		CreatedAt: input.CreatedAt,
		UpdatedAt: input.UpdatedAt,
	}
	r.profiles = append(r.profiles, profile)
	return profile, nil
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context, id string) (*model.Profile, error) {
	return r.profile, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
