package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/noonyuu/nfc/back/graph"
	"github.com/noonyuu/nfc/back/graph/model"
)

// CreateProfile is the resolver for the createProfile field.
func (r *mutationResolver) CreateProfile(ctx context.Context, input model.NewProfile) (*model.Profile, error) {
	// uuidを生成
	uid, _ := uuid.NewRandom()
	// 生成したUUIDを文字列に変換
	uidString := uid.String()
	// 現在時刻を取得
	now := time.Now()
	// Profile構造体にUUIDと現在時刻をセット
	profile := &model.Profile{
		ID:             uidString,
		UserID:         input.UserID,
		AvatarURL:      *input.AvatarURL,
		NickName:       input.NickName,
		GraduationYear: input.GraduationYear,
		Affiliation:    *input.Affiliation,
		Bio:            *input.Bio,
		CreatedAt:      now,
		UpdatedAt:      now,
	}

	query := `
	INSERT INTO profiles (id, user_id, avatar_url, nick_name, graduation_year, affiliation, bio, created_at, updated_at)
	VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`
	if _, err := r.DB.Exec(query, profile.ID, profile.UserID, profile.AvatarURL, profile.NickName, profile.GraduationYear, profile.Affiliation, profile.Bio, now, now); err != nil {
		return nil, err
	}
	return profile, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *profileResolver) CreatedAt(ctx context.Context, obj *model.Profile) (string, error) {
	return obj.CreatedAt.Format("2006-01-02 15:04:05"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *profileResolver) UpdatedAt(ctx context.Context, obj *model.Profile) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02 15:04:05"), nil
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context, id string) (*model.Profile, error) {
	return r.profile, nil
}

// Profile returns graph.ProfileResolver implementation.
func (r *Resolver) Profile() graph.ProfileResolver { return &profileResolver{r} }

type profileResolver struct{ *Resolver }
