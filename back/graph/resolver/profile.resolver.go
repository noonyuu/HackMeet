package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"database/sql"
	"fmt"
	"time"

	"github.com/noonyuu/nfc/back/graph"
	"github.com/noonyuu/nfc/back/graph/model"
)

// CreateProfile is the resolver for the createProfile field.
func (r *mutationResolver) CreateProfile(ctx context.Context, input model.NewProfile) (*model.Profile, error) {
	now := time.Now()

	var avatarURL sql.NullString
	if input.AvatarURL != nil {
		avatarURL = sql.NullString{String: *input.AvatarURL, Valid: true}
	} else {
		avatarURL = sql.NullString{Valid: false}
	}

	var graduationYear sql.NullInt32
	if input.GraduationYear != nil {
		graduationYear = sql.NullInt32{Int32: *input.GraduationYear, Valid: true}
	} else {
		graduationYear = sql.NullInt32{Valid: false}
	}

	var affiliation sql.NullString
	if input.Affiliation != nil {
		affiliation = sql.NullString{String: *input.Affiliation, Valid: true}
	} else {
		affiliation = sql.NullString{Valid: false}
	}

	var bio sql.NullString
	if input.Bio != nil {
		bio = sql.NullString{String: *input.Bio, Valid: true}
	} else {
		bio = sql.NullString{Valid: false}
	}

	profileToInsert := &model.Profile{
		ID:        input.UserID,
		CreatedAt: now,
		UpdatedAt: now,
	}

	if avatarURL.Valid {
		profileToInsert.AvatarURL = avatarURL.String
	} else {
		profileToInsert.AvatarURL = ""
	}

	profileToInsert.NickName = input.NickName

	if graduationYear.Valid {
		profileToInsert.GraduationYear = &graduationYear.Int32
	} else {
		profileToInsert.GraduationYear = nil
	}

	if affiliation.Valid {
		profileToInsert.Affiliation = &affiliation.String
	} else {
		profileToInsert.Affiliation = nil
	}

	if bio.Valid {
		profileToInsert.Bio = &bio.String
	} else {
		profileToInsert.Bio = nil
	}

	query := `
  INSERT INTO profiles (id, avatar_url, nick_name, graduation_year, affiliation, bio, created_at, updated_at)
  VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`
	_, err := r.DB.ExecContext(ctx, query,
		profileToInsert.ID,
		avatarURL,
		profileToInsert.NickName,
		graduationYear,
		affiliation,
		bio,
		profileToInsert.CreatedAt,
		profileToInsert.UpdatedAt,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to insert profile: %w", err)
	}

	return profileToInsert, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *profileResolver) CreatedAt(ctx context.Context, obj *model.Profile) (string, error) {
	return obj.CreatedAt.Format("2006-01-02 15:04:05"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *profileResolver) UpdatedAt(ctx context.Context, obj *model.Profile) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02 15:04:05"), nil
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context, id string) (*model.Profile, error) {
	query := `
  SELECT id, avatar_url, nick_name, graduation_year, affiliation, bio, created_at, updated_at
  FROM profiles
  WHERE id = ?
`
	row := r.DB.QueryRowContext(ctx, query, id)

	var profile model.Profile
	var avatarURL sql.NullString
	var nickName sql.NullString
	var graduationYear sql.NullInt32
	var affiliation sql.NullString
	var bio sql.NullString

	if err := row.Scan(
		&profile.ID,
		&avatarURL,
		&nickName,
		&graduationYear,
		&affiliation,
		&bio,
		&profile.CreatedAt,
		&profile.UpdatedAt,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, fmt.Errorf("failed to scan profile by ID %s: %w", id, err)
	}

	if avatarURL.Valid {
		profile.AvatarURL = avatarURL.String
	} else {
		profile.AvatarURL = ""
	}

	if nickName.Valid {
		profile.NickName = nickName.String
	} else {
		profile.NickName = ""
	}

	if graduationYear.Valid {
		profile.GraduationYear = &graduationYear.Int32
	} else {
		profile.GraduationYear = nil
	}

	if affiliation.Valid {
		profile.Affiliation = &affiliation.String
	} else {
		profile.Affiliation = nil
	}

	if bio.Valid {
		profile.Bio = &bio.String
	} else {
		profile.Bio = nil
	}

	return &profile, nil
}

// ProfileByNickName is the resolver for the profileByNickName field.
func (r *queryResolver) ProfileByNickName(ctx context.Context, nickName string) (*model.Profile, error) {
	query := `
	SELECT id, avatar_url, nick_name, graduation_year, affiliation, bio, created_at, updated_at
	FROM profiles
	WHERE nick_name = ?
`
	row := r.DB.QueryRow(query, nickName)

	var profile model.Profile
	var avatarURL sql.NullString
	var nickNames sql.NullString
	var graduationYear sql.NullInt32
	var affiliation sql.NullString
	var bio sql.NullString

	if err := row.Scan(
		&profile.ID,
		&avatarURL,
		&nickNames,
		&graduationYear,
		&affiliation,
		&bio,
		&profile.CreatedAt,
		&profile.UpdatedAt,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, fmt.Errorf("failed to scan profile by user name %s: %w", nickName, err)
	}

	if avatarURL.Valid {
		profile.AvatarURL = avatarURL.String
	} else {
		profile.AvatarURL = ""
	}

	if nickNames.Valid {
		profile.NickName = nickNames.String
	} else {
		profile.NickName = ""
	}

	if graduationYear.Valid {
		profile.GraduationYear = &graduationYear.Int32
	} else {
		profile.GraduationYear = nil
	}

	if affiliation.Valid {
		profile.Affiliation = &affiliation.String
	} else {
		profile.Affiliation = nil
	}

	if bio.Valid {
		profile.Bio = &bio.String
	} else {
		profile.Bio = nil
	}
	return &profile, nil
}

// ProfileByUserID is the resolver for the profileByUserId field.
func (r *queryResolver) ProfileByUserID(ctx context.Context, id string) (*model.Profile, error) {
	query := `
  SELECT id, avatar_url, nick_name, graduation_year, affiliation, bio, created_at, updated_at
  FROM profiles
  WHERE id = ?
  `

	row := r.DB.QueryRowContext(ctx, query, id)

	var profile model.Profile
	var avatarURL sql.NullString
	var nickName sql.NullString
	var graduationYear sql.NullInt32
	var affiliation sql.NullString
	var bio sql.NullString

	if err := row.Scan(
		&profile.ID,
		&avatarURL,
		&nickName,
		&graduationYear,
		&affiliation,
		&bio,
		&profile.CreatedAt,
		&profile.UpdatedAt,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, fmt.Errorf("failed to scan profile data for ID %s: %w", id, err)
	}

	if avatarURL.Valid {
		profile.AvatarURL = avatarURL.String
	} else {
		profile.AvatarURL = ""
	}

	if nickName.Valid {
		profile.NickName = nickName.String
	} else {
		profile.NickName = ""
	}

	if graduationYear.Valid {
		profile.GraduationYear = &graduationYear.Int32
	} else {
		profile.GraduationYear = nil
	}

	if affiliation.Valid {
		profile.Affiliation = &affiliation.String
	} else {
		profile.Affiliation = nil
	}

	if bio.Valid {
		profile.Bio = &bio.String
	} else {
		profile.Bio = nil
	}

	return &profile, nil
}

// Profile returns graph.ProfileResolver implementation.
func (r *Resolver) Profile() graph.ProfileResolver { return &profileResolver{r} }

type profileResolver struct{ *Resolver }
