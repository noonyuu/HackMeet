package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"time"

	"github.com/noonyuu/nfc/back/graph"
	"github.com/noonyuu/nfc/back/graph/model"
)

// CreateProfileSkill is the resolver for the createProfileSkill field.
func (r *mutationResolver) CreateProfileSkill(ctx context.Context, input model.NewProfileSkill) (*model.ProfileSkill, error) {
	// 現在時刻を取得
	now := time.Now()
	// ProfileSkill構造体にUUIDと現在時刻をセット
	profileSkill := &model.ProfileSkill{
		ProfileID: input.ProfileID,
		SkillID:   input.SkillID,
		CreatedAt: now,
		UpdatedAt: now,
	}

	query := `
	INSERT INTO profile_skills (profile_id, skill_id, created_at, updated_at)
	VALUES (?, ?, ?, ?)
`
	if _, err := r.DB.Exec(query, profileSkill.ProfileID, profileSkill.SkillID, now, now); err != nil {
		return nil, err
	}

	return profileSkill, nil
}

// DeleteProfileSkill is the resolver for the deleteProfileSkill field.
func (r *mutationResolver) DeleteProfileSkill(ctx context.Context, id int32) (*model.ProfileSkill, error) {
	query := `
	DELETE FROM profile_skills WHERE id = ?
`
	if _, err := r.DB.Exec(query, id); err != nil {
		return nil, err
	}

	return &model.ProfileSkill{ID: id}, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *profileSkillResolver) CreatedAt(ctx context.Context, obj *model.ProfileSkill) (string, error) {
	return obj.CreatedAt.Format("2006-01-02 15:04:05"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *profileSkillResolver) UpdatedAt(ctx context.Context, obj *model.ProfileSkill) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02 15:04:05"), nil
}

// ProfileSkill is the resolver for the profileSkill field.
func (r *queryResolver) ProfileSkill(ctx context.Context, id int32) (*model.ProfileSkill, error) {
	query := `
	SELECT id, profile_id, skill_id, created_at, updated_at
	FROM profile_skills
	WHERE id = ?
`
	var profileSkill model.ProfileSkill
	if err := r.DB.QueryRow(query, id).Scan(&profileSkill.ID, &profileSkill.ProfileID, &profileSkill.SkillID, &profileSkill.CreatedAt, &profileSkill.UpdatedAt); err != nil {
		return nil, err
	}

	return &profileSkill, nil
}

// ProfileSkillsByProfileID is the resolver for the profileSkillsByProfileId field.
func (r *queryResolver) ProfileSkillsByProfileID(ctx context.Context, profileID string) ([]*model.ProfileSkill, error) {
	query := `
	SELECT id, profile_id, skill_id, created_at, updated_at
	FROM profile_skills
	WHERE profile_id = ?
`
	rows, err := r.DB.Query(query, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var profileSkills []*model.ProfileSkill
	for rows.Next() {
		var profileSkill model.ProfileSkill
		if err := rows.Scan(&profileSkill.ID, &profileSkill.ProfileID, &profileSkill.SkillID, &profileSkill.CreatedAt, &profileSkill.UpdatedAt); err != nil {
			return nil, err
		}
		profileSkills = append(profileSkills, &profileSkill)
	}

	return profileSkills, nil
}

// ProfileSkill returns graph.ProfileSkillResolver implementation.
func (r *Resolver) ProfileSkill() graph.ProfileSkillResolver { return &profileSkillResolver{r} }

type profileSkillResolver struct{ *Resolver }
