package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"time"

	"github.com/noonyuu/nfc/back/graph"
	"github.com/noonyuu/nfc/back/graph/model"
)

// CreateWorkSkill is the resolver for the createWorkSkill field.
func (r *mutationResolver) CreateWorkSkill(ctx context.Context, input model.NewWorkSkill) (*model.WorkSkill, error) {
	// 現在時刻を取得
	now := time.Now()
	// WorkSkill構造体にUUIDと現在時刻をセット
	workSkill := &model.WorkSkill{
		WorkID:    input.WorkID,
		SkillID:   input.SkillID,
		CreatedAt: now,
		UpdatedAt: now,
	}

	query := `
	INSERT INTO work_skills (work_id, skill_id, created_at, updated_at)
	VALUES (?, ?, ?, ?)
`
	if _, err := r.DB.Exec(query, workSkill.WorkID, workSkill.SkillID, now, now); err != nil {
		return nil, err
	}

	return workSkill, nil
}

// DeleteWorkSkill is the resolver for the deleteWorkSkill field.
func (r *mutationResolver) DeleteWorkSkill(ctx context.Context, id int32) (*model.WorkSkill, error) {
	query := `
	DELETE FROM work_skills WHERE id = ?
`
	if _, err := r.DB.Exec(query, id); err != nil {
		return nil, err
	}

	return &model.WorkSkill{ID: id}, nil
}

// WorkSkillsByWorkID is the resolver for the workSkillsByWorkId field.
func (r *queryResolver) WorkSkillsByWorkID(ctx context.Context, workID string) ([]*model.WorkSkill, error) {
	query := `
	SELECT id, work_id, skill_id, created_at, updated_at
	FROM work_skills
	WHERE work_id = ?
`
	workSkills := []*model.WorkSkill{}
	rows, err := r.DB.Query(query, workID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		workSkill := &model.WorkSkill{}
		if err := rows.Scan(&workSkill.ID, &workSkill.WorkID, &workSkill.SkillID, &workSkill.CreatedAt, &workSkill.UpdatedAt); err != nil {
			return nil, err
		}
		workSkills = append(workSkills, workSkill)
	}

	return workSkills, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *workSkillResolver) CreatedAt(ctx context.Context, obj *model.WorkSkill) (string, error) {
	return obj.CreatedAt.Format("2006-01-02 15:04:05"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *workSkillResolver) UpdatedAt(ctx context.Context, obj *model.WorkSkill) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02 15:04:05"), nil
}

// WorkSkill returns graph.WorkSkillResolver implementation.
func (r *Resolver) WorkSkill() graph.WorkSkillResolver { return &workSkillResolver{r} }

type workSkillResolver struct{ *Resolver }
