/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermImport } from './routes/term'
import { Route as RegisterImport } from './routes/register'
import { Route as PolicyImport } from './routes/policy'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as NfcIndexImport } from './routes/nfc/index'
import { Route as EventIndexImport } from './routes/event/index'
import { Route as ProfileProjectlistImport } from './routes/profile/project_list'
import { Route as ProfileEditImport } from './routes/profile/edit'
import { Route as WorksCreateIndexImport } from './routes/works/create/index'
import { Route as NfcWorkIdIndexImport } from './routes/nfc/$workId/index'
import { Route as EventEventIdIndexImport } from './routes/event/$eventId/index'
import { Route as WorksCreateEventIdIndexImport } from './routes/works/create/$eventId/index'

// Create/Update Routes

const TermRoute = TermImport.update({
  id: '/term',
  path: '/term',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const PolicyRoute = PolicyImport.update({
  id: '/policy',
  path: '/policy',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NfcIndexRoute = NfcIndexImport.update({
  id: '/nfc/',
  path: '/nfc/',
  getParentRoute: () => rootRoute,
} as any)

const EventIndexRoute = EventIndexImport.update({
  id: '/event/',
  path: '/event/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileProjectlistRoute = ProfileProjectlistImport.update({
  id: '/profile/project_list',
  path: '/profile/project_list',
  getParentRoute: () => rootRoute,
} as any)

const ProfileEditRoute = ProfileEditImport.update({
  id: '/profile/edit',
  path: '/profile/edit',
  getParentRoute: () => rootRoute,
} as any)

const WorksCreateIndexRoute = WorksCreateIndexImport.update({
  id: '/works/create/',
  path: '/works/create/',
  getParentRoute: () => rootRoute,
} as any)

const NfcWorkIdIndexRoute = NfcWorkIdIndexImport.update({
  id: '/nfc/$workId/',
  path: '/nfc/$workId/',
  getParentRoute: () => rootRoute,
} as any)

const EventEventIdIndexRoute = EventEventIdIndexImport.update({
  id: '/event/$eventId/',
  path: '/event/$eventId/',
  getParentRoute: () => rootRoute,
} as any)

const WorksCreateEventIdIndexRoute = WorksCreateEventIdIndexImport.update({
  id: '/works/create/$eventId/',
  path: '/works/create/$eventId/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/policy': {
      id: '/policy'
      path: '/policy'
      fullPath: '/policy'
      preLoaderRoute: typeof PolicyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/term': {
      id: '/term'
      path: '/term'
      fullPath: '/term'
      preLoaderRoute: typeof TermImport
      parentRoute: typeof rootRoute
    }
    '/profile/edit': {
      id: '/profile/edit'
      path: '/profile/edit'
      fullPath: '/profile/edit'
      preLoaderRoute: typeof ProfileEditImport
      parentRoute: typeof rootRoute
    }
    '/profile/project_list': {
      id: '/profile/project_list'
      path: '/profile/project_list'
      fullPath: '/profile/project_list'
      preLoaderRoute: typeof ProfileProjectlistImport
      parentRoute: typeof rootRoute
    }
    '/event/': {
      id: '/event/'
      path: '/event'
      fullPath: '/event'
      preLoaderRoute: typeof EventIndexImport
      parentRoute: typeof rootRoute
    }
    '/nfc/': {
      id: '/nfc/'
      path: '/nfc'
      fullPath: '/nfc'
      preLoaderRoute: typeof NfcIndexImport
      parentRoute: typeof rootRoute
    }
    '/event/$eventId/': {
      id: '/event/$eventId/'
      path: '/event/$eventId'
      fullPath: '/event/$eventId'
      preLoaderRoute: typeof EventEventIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/nfc/$workId/': {
      id: '/nfc/$workId/'
      path: '/nfc/$workId'
      fullPath: '/nfc/$workId'
      preLoaderRoute: typeof NfcWorkIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/works/create/': {
      id: '/works/create/'
      path: '/works/create'
      fullPath: '/works/create'
      preLoaderRoute: typeof WorksCreateIndexImport
      parentRoute: typeof rootRoute
    }
    '/works/create/$eventId/': {
      id: '/works/create/$eventId/'
      path: '/works/create/$eventId'
      fullPath: '/works/create/$eventId'
      preLoaderRoute: typeof WorksCreateEventIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/policy': typeof PolicyRoute
  '/register': typeof RegisterRoute
  '/term': typeof TermRoute
  '/profile/edit': typeof ProfileEditRoute
  '/profile/project_list': typeof ProfileProjectlistRoute
  '/event': typeof EventIndexRoute
  '/nfc': typeof NfcIndexRoute
  '/event/$eventId': typeof EventEventIdIndexRoute
  '/nfc/$workId': typeof NfcWorkIdIndexRoute
  '/works/create': typeof WorksCreateIndexRoute
  '/works/create/$eventId': typeof WorksCreateEventIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/policy': typeof PolicyRoute
  '/register': typeof RegisterRoute
  '/term': typeof TermRoute
  '/profile/edit': typeof ProfileEditRoute
  '/profile/project_list': typeof ProfileProjectlistRoute
  '/event': typeof EventIndexRoute
  '/nfc': typeof NfcIndexRoute
  '/event/$eventId': typeof EventEventIdIndexRoute
  '/nfc/$workId': typeof NfcWorkIdIndexRoute
  '/works/create': typeof WorksCreateIndexRoute
  '/works/create/$eventId': typeof WorksCreateEventIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/policy': typeof PolicyRoute
  '/register': typeof RegisterRoute
  '/term': typeof TermRoute
  '/profile/edit': typeof ProfileEditRoute
  '/profile/project_list': typeof ProfileProjectlistRoute
  '/event/': typeof EventIndexRoute
  '/nfc/': typeof NfcIndexRoute
  '/event/$eventId/': typeof EventEventIdIndexRoute
  '/nfc/$workId/': typeof NfcWorkIdIndexRoute
  '/works/create/': typeof WorksCreateIndexRoute
  '/works/create/$eventId/': typeof WorksCreateEventIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/policy'
    | '/register'
    | '/term'
    | '/profile/edit'
    | '/profile/project_list'
    | '/event'
    | '/nfc'
    | '/event/$eventId'
    | '/nfc/$workId'
    | '/works/create'
    | '/works/create/$eventId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/policy'
    | '/register'
    | '/term'
    | '/profile/edit'
    | '/profile/project_list'
    | '/event'
    | '/nfc'
    | '/event/$eventId'
    | '/nfc/$workId'
    | '/works/create'
    | '/works/create/$eventId'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/policy'
    | '/register'
    | '/term'
    | '/profile/edit'
    | '/profile/project_list'
    | '/event/'
    | '/nfc/'
    | '/event/$eventId/'
    | '/nfc/$workId/'
    | '/works/create/'
    | '/works/create/$eventId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  PolicyRoute: typeof PolicyRoute
  RegisterRoute: typeof RegisterRoute
  TermRoute: typeof TermRoute
  ProfileEditRoute: typeof ProfileEditRoute
  ProfileProjectlistRoute: typeof ProfileProjectlistRoute
  EventIndexRoute: typeof EventIndexRoute
  NfcIndexRoute: typeof NfcIndexRoute
  EventEventIdIndexRoute: typeof EventEventIdIndexRoute
  NfcWorkIdIndexRoute: typeof NfcWorkIdIndexRoute
  WorksCreateIndexRoute: typeof WorksCreateIndexRoute
  WorksCreateEventIdIndexRoute: typeof WorksCreateEventIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  PolicyRoute: PolicyRoute,
  RegisterRoute: RegisterRoute,
  TermRoute: TermRoute,
  ProfileEditRoute: ProfileEditRoute,
  ProfileProjectlistRoute: ProfileProjectlistRoute,
  EventIndexRoute: EventIndexRoute,
  NfcIndexRoute: NfcIndexRoute,
  EventEventIdIndexRoute: EventEventIdIndexRoute,
  NfcWorkIdIndexRoute: NfcWorkIdIndexRoute,
  WorksCreateIndexRoute: WorksCreateIndexRoute,
  WorksCreateEventIdIndexRoute: WorksCreateEventIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/policy",
        "/register",
        "/term",
        "/profile/edit",
        "/profile/project_list",
        "/event/",
        "/nfc/",
        "/event/$eventId/",
        "/nfc/$workId/",
        "/works/create/",
        "/works/create/$eventId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/policy": {
      "filePath": "policy.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/term": {
      "filePath": "term.tsx"
    },
    "/profile/edit": {
      "filePath": "profile/edit.tsx"
    },
    "/profile/project_list": {
      "filePath": "profile/project_list.tsx"
    },
    "/event/": {
      "filePath": "event/index.tsx"
    },
    "/nfc/": {
      "filePath": "nfc/index.tsx"
    },
    "/event/$eventId/": {
      "filePath": "event/$eventId/index.tsx"
    },
    "/nfc/$workId/": {
      "filePath": "nfc/$workId/index.tsx"
    },
    "/works/create/": {
      "filePath": "works/create/index.tsx"
    },
    "/works/create/$eventId/": {
      "filePath": "works/create/$eventId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
